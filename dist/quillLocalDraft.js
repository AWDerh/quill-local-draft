(()=>{"use strict";var t=function(){return(t=Object.assign||function(t){for(var i,n=1,e=arguments.length;n<e;n++)for(var o in i=arguments[n])Object.prototype.hasOwnProperty.call(i,o)&&(t[o]=i[o]);return t}).apply(this,arguments)},i={id:"",prefix:"quill_local_draft",saveDelay:1e3,displaySave:!0,bindInitial:!0};!function(){function n(t,i){this.quill=t,this.options=this.applyOptions(i),this.initialized=!1,this.options.bindInitial&&this.bindInitialListener()}n.prototype.init=function(){this.initialized||(this.initialized=!0,this.unbindListener(),this.loadDraft(),this.bindListener())},n.prototype.bindInitialListener=function(){var t=this;if(this.initialized)return this.bindListener();this.unbindListener(),this.listener=function(){return t.init()},this.quill.once("text-change",this.listener)},n.prototype.bindListener=function(){var t=this;this.unbindListener();var i=function(){return t.saveDraft()};this.listener=this.options.saveDelay?function(t,i,n,e){var o,r=!1,s=0;function a(){o&&clearTimeout(o)}function l(){for(var l=arguments.length,u=new Array(l),h=0;h<l;h++)u[h]=arguments[h];var c=this,f=Date.now()-s;function p(){s=Date.now(),n.apply(c,u)}function d(){o=void 0}r||(e&&!o&&p(),a(),void 0===e&&f>t?p():!0!==i&&(o=setTimeout(e?d:p,void 0===e?t-f:t)))}return"boolean"!=typeof i&&(e=n,n=i,i=void 0),l.cancel=function(){a(),r=!0},l}(this.options.saveDelay,i):i,this.quill.on("text-change",this.listener)},n.prototype.unbindListener=function(){this.listener&&this.quill.off("text-change",this.listener)},n.prototype.applyOptions=function(n){return t(t({},i),n)},Object.defineProperty(n.prototype,"id",{get:function(){var t;return(null!==(t=this.options.prefix)&&void 0!==t?t:"")+"_"+this.options.id},enumerable:!1,configurable:!0}),n.prototype.getContents=function(){return JSON.stringify(this.quill.getContents())},n.prototype.setContents=function(t){var i=null;try{i=JSON.parse(t)}catch(t){return void console.error("Could not parse local draft Delta.")}i&&this.quill.setContents(i)},n.prototype.getDraft=function(){var t,i=this.id,n="";try{n=null!==(t=localStorage.getItem(i))&&void 0!==t?t:""}catch(t){}return n},n.prototype.setDraft=function(t){void 0===t&&(t="");var i=this.id;try{localStorage.setItem(i,t)}catch(t){if(!(t instanceof DOMException&&t.code==t.QUOTA_EXCEEDED_ERR))throw t;console.error("Could not save local draft",t)}},n.prototype.saveDraft=function(){var t=this.getContents();this.setDraft(t)},n.prototype._loadDraft=function(){var t=this.getDraft();this.setContents(t)},n.prototype.editorIsEmpty=function(){return 0==this.quill.getText().trim().length},n.prototype.loadDraft=function(){return!(!this.editorIsEmpty()&&!window.confirm("There is a local saved draft for this notebook, but loading it would reset the editor. Do you still want to load the draft?"))&&this._loadDraft()}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,